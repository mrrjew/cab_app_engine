{"version":3,"file":"index.js","sourceRoot":"/","sources":["models/index.ts"],"names":[],"mappings":";;;AAAA,uCAAmC;AAEnC,+DAA+B;AAE/B,QAAQ;AACR,iEAAiC;AACjC,OAAO;AACP,0DAA0B;AAC1B,UAAU;AACV,gEAA+B;AAS/B,SAA8B,MAAM,CAAC,MAAoB;;QACvD,IAAI;YACF,MAAM,IAAA,kBAAO,EAAC,MAAM,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;YAC/C,aAAG,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;YAE/C,MAAM,eAAK,CAAC,gBAAgB,EAAE,CAAC;YAC/B,MAAM,cAAI,CAAC,gBAAgB,EAAE,CAAC;YAC9B,MAAM,iBAAO,CAAC,gBAAgB,EAAE,CAAC;YAEjC,OAAO;gBACL,KAAK,EAAL,eAAK;gBACL,IAAI,EAAJ,cAAI;gBACJ,OAAO,EAAP,iBAAO;aACR,CAAC;SACH;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,EAAE,CAAC,CAAC;SAC9D;IACH,CAAC;CAAA;AAjBD,yBAiBC","sourcesContent":["import { connect } from 'mongoose';\nimport { Config } from '../config';\nimport log from '../utils/log';\n\n// Rider\nimport Rider from './user/rider';\n// ride\nimport Ride from './ride';\n// mileage\nimport Mileage from './mileage'\n\n\nexport interface IModels {\n  Rider: typeof Rider;\n  Ride: typeof Ride;\n  Mileage: typeof Mileage;\n}\n\nexport default async function initDB(config: Config['db']): Promise<IModels> {\n  try {\n    await connect(config.uri, { autoIndex: true });\n    log.info('Connected to database successfully');\n\n    await Rider.createCollection();\n    await Ride.createCollection();\n    await Mileage.createCollection();\n\n    return {\n      Rider,\n      Ride,\n      Mileage\n    };\n  } catch (e) {\n    throw new Error(`Error while connecting to database : ${e}`);\n  }\n}"]}