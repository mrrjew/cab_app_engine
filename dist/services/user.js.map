{"version":3,"file":"user.js","sourceRoot":"/","sources":["services/user.ts"],"names":[],"mappings":"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","sourcesContent":["import IService, { IAppContext } from '../types/app';\nimport { IUserAuth, IUserInput, IUserResetPasswordInput, IUserVerificationInput } from '../types/user/user';\nimport sendSms from '../utils/sms';\nimport log from '../utils/log';\nimport otp from 'otp-generator'\n\nexport default class UserService extends IService {\n  constructor(context: IAppContext) {\n    super(context);\n  }\n\n  // registers user\n  async registerUser(req,res){\n    try {\n      const {phoneNumber} = req.body\n      if(!phoneNumber){\n        res.status(422).send('no input was received')\n      }\n      const _user = await this.models.User.findOne({ phoneNumber});\n      if (_user) throw new Error('User already exists');\n      \n      const user = new this.models.User({phoneNumber});\n      await user.save();\n      \n      await sendSms(phoneNumber,`This is your cab app verification code: ${user.verificationCode}. Thank you for signing up.`)\n      \n      return user\n      \n    } catch (e) {\n      res.status(500).send(`Error creating new user: ${e}`)\n    }\n  }\n\n  //verifies user\n  async verifyUser(req,res): Promise<boolean> {\n    const { id, verificationCode } = req.body;\n    if(!id || !verificationCode){\n      res.status(422).send('missing required fields')\n    }\n    try {\n      // Find the user by Id\n      const user = await this.authenticate_user(id)\n      // Check if the user is already verified\n      if (user.verified) {\n        res.status(500).send('user is already verified')\n      }\n      \n      // Check if verificationCode matches\n      if (user.verificationCode != verificationCode) {\n        res.status(500).send('Invalid verification code')\n      }\n      \n      // Set verified to true and save user\n      user.verified = true;\n      await user.save();\n      \n      return true;\n    } catch (e) {\n      res.status(500).send(`Error validating user: ${e}`)\n    }\n  }\n\n  // sends password reset code to user's email\n  async forgotPassword(req,res) {\n   try{\n    const { phoneNumber } = req.body;\n    if(!phoneNumber){\n      res.status(422).send('no input received')\n    }\n    \n    const user = await this.models.User.findOne({ phoneNumber });\n    \n    if (!user) {\n      res.status(404).send('user not found')\n    }\n    \n    if (!user.verified) {\n      res.status(500).send('user is not verified')\n    }\n\n    const passwordResetCode = otp.generate(4,{upperCaseAlphabets:false,specialChars:false,lowerCaseAlphabets:false});\n\n    user.passwordResetCode = passwordResetCode;\n\n    await user.save();\n\n    await sendSms(phoneNumber,`This is your cab app password reset code:${user.passwordResetCode}`)\n\n    log.debug(`Password reset code sent to ${user.phoneNumber}`);\n\n    const message = 'password reset code sent';\n    return message;\n   }catch(e){\n    res.status(500).send(`error handing password reset: ${e}`)\n   }\n  }\n\n  // resets user's password to new password from email\n  async resetPassword(req,res) {\n    try{\n      const { id, passwordResetCode, newPassword } = req.body;\n\n    if(!id || !passwordResetCode || !newPassword ){\n      res.status(422).send('missing required fields')\n    }\n\n    const user = await this.authenticate_user(id)\n\n    if (!user || user.passwordResetCode !== passwordResetCode) {\n      res.status(404).send('Could not reset password');\n    }\n\n    user.passwordResetCode = null;\n\n    user.password = newPassword;\n\n    await user.save();  \n\n    const message = 'Successfully updated password';\n    return message;\n    }catch(e){\n      res.status(500).send('error reseting password')\n    }\n  }\n\n  // login user\n  async loginUser(req,res) {\n    const { phoneNumber, password } = req.body;\n    if(!phoneNumber || !password){\n      res.status(500).send('missing required fields')\n    }\n\n    const user = await this.models.User.findOne({ phoneNumber });\n    if (!user) {\n      res.status(404).send('user not found');\n    }\n\n    try {\n      const valid = await user.validatePassword(password);\n      if (!valid) {\n        res.status(500).send('password incorrect');\n      }\n    } catch (e) {\n      res.status(500).send('error logging in')\n    }\n\n    return user;\n  }\n\n  // updates user details\n  async updateUser(req,res) {\n    try {\n      const user = await this.authenticate_user(req.user._id)\n  \n      if ('rating' in req.body) {\n        user.rating = req.body.rating;\n      } else {\n        if (user._id.toString() !== req.user._id.toString()) {\n          throw new Error(`Unauthorized: Cannot update another user's details`);\n        }\n  \n        for (const key in req.body) {\n          if (key !== 'rating') {\n            user[key] = req.body[key];\n          }\n        }\n      }\n  \n      await user.save();\n  \n      return user;\n    } catch (e) {\n      res.status(500).send(`Error updating user: ${e.message}`);\n    }\n  }\n  \n  // deletes user account\n  async deleteUser(req,res) {\n    const user = await this.authenticate_user(req.user._id)\n    if(!user){\n      res.status(404).send('Error deleting user')\n    }\n\n    try {\n      await this.models.User.findByIdAndDelete(req.user._id);\n      res.status(200).send(`Deleted user successfully`);\n    } catch (e) {\n      res.status(500).send(`Error deleting user`);\n    }\n  }\n\n  // getting user rating\n  async getUserRating(req,res) {\n    try {\n      const user = await this.models.User.findOne({_id:req.user._id});\n      if (user.rating.length === 0) {\n        return {\n          averageRating: 0,\n          totalRatings: 0,\n        };\n      }\n\n      const totalScore = user.rating.reduce((sum: any, rating: any) => sum + rating.score, 0);\n      const averageRating = totalScore / user.rating.length;\n\n      return {\n        averageRating,\n        totalRatings: user.rating.length,\n      };\n    } catch (error) {\n      res.status(500).send('Failed to fetch ratings');\n    }\n  }\n}\n"]}