{"version":3,"file":"rider.session.js","sourceRoot":"/","sources":["services/auth/session/rider.session.ts"],"names":[],"mappings":";;;AAAA,gDAAiD;AACjD,oDAA4F;AAE5F,qEAA2D;AAE3D,MAAqB,kBAAmB,SAAQ,aAAQ;IACtD,YAAY,KAAkB;QAC5B,KAAK,CAAC,KAAK,CAAC,CAAC;IACf,CAAC;IACD,wBAAwB;IAClB,iBAAiB,CAAC,GAAG,EAAE,GAAG;;YAC9B,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;YACxB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAElD,IAAI,CAAC,IAAI,EAAE;gBACT,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;aAC3C;YAED,MAAM,WAAW,GAAG,MAAM,IAAA,yBAAe,EAAC,IAAI,CAAC,CAAC;YAEhD,MAAM,YAAY,GAAG,MAAM,IAAA,0BAAgB,EAAC,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;YAElE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,WAAW;gBACX,YAAY;aACb,CAAC,CAAC;QACL,CAAC;KAAA;IAED,0BAA0B;IACpB,kBAAkB,CAAC,GAAG,EAAE,GAAG;;YAC/B,MAAM,OAAO,GAAG,MAAM,IAAA,iBAAS,EAAsB,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAErE,IAAI,CAAC,OAAO,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;aACnD;YAED,MAAM,OAAO,GAAG,MAAM,IAAA,yBAAe,EAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAEvD,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;gBAC9B,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;aACnD;YAED,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YAEtE,IAAI,CAAC,IAAI,EAAE;gBACT,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;aACnD;YAED,MAAM,WAAW,GAAG,MAAM,IAAA,yBAAe,EAAC,IAAI,CAAC,CAAC;YAEhD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;QAC/C,CAAC;KAAA;CACF;AA/CD,qCA+CC","sourcesContent":["import { verifyJwt } from '../../../utils/token';\nimport { findSessionById, signAccessToken, signRefreshToken } from '../../../utils/session';\n\nimport IService, { IAppContext } from '../../../types/app';\n\nexport default class UserSessionService extends IService {\n  constructor(props: IAppContext) {\n    super(props);\n  }\n  // creates access tokens\n  async createUserSession(req, res) {\n    const id = req.body._id;\n    const user = await this.models.Rider.findById(id);\n\n    if (!user) {\n      throw new Error('Invalid id or password');\n    }\n\n    const accessToken = await signAccessToken(user);\n\n    const refreshToken = await signRefreshToken({ userId: user._id });\n\n    return res.status(201).json({\n      accessToken,\n      refreshToken,\n    });\n  }\n\n  // refreshes access tokens\n  async refreshAccessToken(req, res) {\n    const decoded = await verifyJwt<{ session: string }>(req.body.token);\n\n    if (!decoded) {\n      throw new Error('Could not refresh access token');\n    }\n\n    const session = await findSessionById(decoded.session);\n\n    if (!session || !session.valid) {\n      throw new Error('Could not refresh access token');\n    }\n\n    const user = await this.models.Rider.findById(String(session.userId));\n\n    if (!user) {\n      throw new Error('Could not refresh access token');\n    }\n\n    const accessToken = await signAccessToken(user);\n\n    return res.status(201).json({ accessToken });\n  }\n}\n"]}