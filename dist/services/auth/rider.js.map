{"version":3,"file":"rider.js","sourceRoot":"/","sources":["services/auth/rider.ts"],"names":[],"mappings":"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","sourcesContent":["import IService, { IAppContext } from '../../types/app';\nimport sendSms from '../../utils/sms';\nimport log from '../../utils/log';\nimport otp from 'otp-generator';\n\nexport default class RiderService extends IService {\n  constructor(context: IAppContext) {\n    super(context);\n  }\n\n  // registers Rider\n  async registerRider(req, res) {\n    try {\n      const { phoneNumber } = req.body;\n      if (!phoneNumber) {\n        res.status(422).send('no input was received');\n      }\n      const _Rider = await this.models.Rider.findOne({ phoneNumber });\n      if (_Rider) throw new Error('Rider already exists');\n\n      const Rider = new this.models.Rider({ phoneNumber });\n      await Rider.save();\n\n      await sendSms(\n        phoneNumber,\n        `This is your cab app verification code: ${Rider.verificationCode}. Thank you for signing up.`\n      );\n\n      return Rider;\n    } catch (e) {\n      res.status(500).send(`Error creating new Rider: ${e}`);\n    }\n  }\n\n  //verifies Rider\n  async verifyRider(req, res): Promise<boolean> {\n    const { id, verificationCode } = req.body;\n    if (!id || !verificationCode) {\n      res.status(422).send('missing required fields');\n    }\n    try {\n      // Find the Rider by Id\n      const Rider = await this.authenticate_rider(id);\n      // Check if the Rider is already verified\n      if (Rider.verified) {\n        res.status(500).send('Rider is already verified');\n      }\n\n      // Check if verificationCode matches\n      if (Rider.verificationCode != verificationCode) {\n        res.status(500).send('Invalid verification code');\n      }\n\n      // Set verified to true and save Rider\n      Rider.verified = true;\n      await Rider.save();\n\n      return true;\n    } catch (e) {\n      res.status(500).send(`Error validating Rider: ${e}`);\n    }\n  }\n\n  // sends password reset code to Rider's email\n  async forgotPassword(req, res) {\n    try {\n      const { phoneNumber } = req.body;\n      if (!phoneNumber) {\n        res.status(422).send('no input received');\n      }\n\n      const Rider = await this.models.Rider.findOne({ phoneNumber });\n\n      if (!Rider) {\n        res.status(404).send('Rider not found');\n      }\n\n      if (!Rider.verified) {\n        res.status(500).send('Rider is not verified');\n      }\n\n      const passwordResetCode = otp.generate(4, {\n        upperCaseAlphabets: false,\n        specialChars: false,\n        lowerCaseAlphabets: false,\n      });\n\n      Rider.passwordResetCode = passwordResetCode;\n\n      await Rider.save();\n\n      await sendSms(phoneNumber, `This is your cab app password reset code:${Rider.passwordResetCode}`);\n\n      log.debug(`Password reset code sent to ${Rider.phoneNumber}`);\n\n      const message = 'password reset code sent';\n      return message;\n    } catch (e) {\n      res.status(500).send(`error handing password reset: ${e}`);\n    }\n  }\n\n  // resets Rider's password to new password from email\n  async resetPassword(req, res) {\n    try {\n      const { id, passwordResetCode, newPassword } = req.body;\n\n      if (!id || !passwordResetCode || !newPassword) {\n        res.status(422).send('missing required fields');\n      }\n\n      const Rider = await this.authenticate_rider(id);\n\n      if (!Rider || Rider.passwordResetCode !== passwordResetCode) {\n        res.status(404).send('Could not reset password');\n      }\n\n      Rider.passwordResetCode = null;\n\n      Rider.password = newPassword;\n\n      await Rider.save();\n\n      const message = 'Successfully updated password';\n      return message;\n    } catch (e) {\n      res.status(500).send('error reseting password');\n    }\n  }\n  // login user\n  async loginRider(req, res) {\n    const { phoneNumber, password } = req.body;\n    if (!phoneNumber || !password) {\n      return res.status(500).send('missing required fields');\n    }\n\n    const rider = await this.models.Rider.findOne({ phoneNumber });\n    if (!rider) {\n      return res.status(404).send('user not found');\n    }\n\n    try {\n      const valid = await rider.validatePassword(password);\n      console.log(valid);\n      if (!valid) {\n        return res.status(500).send('password incorrect');\n      }\n    } catch (e) {\n      return res.status(500).send(`error logging in ${e}`);\n    }\n\n    return res.status(200).json(rider);\n  }\n\n  // updates Rider details\n  async updateRider(req, res) {\n    try {\n      console.log(req.user._id);\n      const Rider = await this.authenticate_rider(req.user._id);\n\n      await Rider.updateOne({ $set: { ...req.body } });\n\n      await Rider.save();\n\n      return Rider;\n    } catch (e) {\n      res.status(500).send(`Error updating Rider: ${e.message}`);\n    }\n  }\n\n  // deletes Rider account\n  async deleteRider(req, res) {\n    const Rider = await this.authenticate_rider(req.user._id);\n    if (!Rider) {\n      res.status(404).send('Error deleting Rider');\n    }\n\n    try {\n      await this.models.Rider.findByIdAndDelete(req.user._id);\n      res.status(200).send(`Deleted Rider successfully`);\n    } catch (e) {\n      res.status(500).send(`Error deleting Rider`);\n    }\n  }\n}\n"]}