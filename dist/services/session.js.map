{"version":3,"file":"session.js","sourceRoot":"/","sources":["services/session.ts"],"names":[],"mappings":";;;AAAA,0CAA2C;AAC3C,8CAAsF;AAEtF,+DAAqD;AAErD,MAAqB,kBAAmB,SAAQ,aAAQ;IACpD,YAAY,KAAiB;QACzB,KAAK,CAAC,KAAK,CAAC,CAAA;IAChB,CAAC;IACC,wBAAwB;IACtB,iBAAiB,CAAC,GAAO;;YAE7B,MAAM,EAAC,EAAE,EAAC,GAAG,GAAG,CAAA;YAChB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAEjD,IAAI,CAAC,IAAI,EAAE;gBACT,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;aAC3C;YAED,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAClB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;aACnD;YAED,MAAM,WAAW,GAAG,MAAM,IAAA,yBAAe,EAAC,IAAI,CAAC,CAAC;YAEhD,MAAM,YAAY,GAAG,MAAM,IAAA,0BAAgB,EAAC,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;YAElE,OAAO;gBACL,WAAW;gBACX,YAAY;aACb,CAAC;QACJ,CAAC;KAAA;IAED,0BAA0B;IACpB,kBAAkB,CAAC,KAAY;;YACnC,MAAM,OAAO,GAAG,MAAM,IAAA,iBAAS,EAAsB,KAAK,CAAC,CAAC;YAE5D,IAAI,CAAC,OAAO,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;aACnD;YAED,MAAM,OAAO,GAAG,MAAM,IAAA,yBAAe,EAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAEvD,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;gBAC9B,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;aACnD;YAED,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YAErE,IAAI,CAAC,IAAI,EAAE;gBACT,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;aACnD;YAED,MAAM,WAAW,GAAG,IAAA,yBAAe,EAAC,IAAI,CAAC,CAAC;YAE1C,OAAO,EAAE,WAAW,EAAE,CAAC;QACzB,CAAC;KAAA;CAEF;AArDD,qCAqDC","sourcesContent":["import { verifyJwt } from '../utils/token';\nimport { findSessionById, signAccessToken, signRefreshToken } from '../utils/session';\n\nimport IService, { IAppContext } from \"../types/app\";\n\nexport default class UserSessionService extends IService{\n    constructor(props:IAppContext){\n        super(props)\n    }\n      // creates access tokens\n  async createUserSession(_id:any) {\n\n    const {id} = _id\n    const user = await this.models.User.findById(id);\n    \n    if (!user) {\n      throw new Error('Invalid id or password');\n    }\n    \n    if (!user.verified) {\n      throw new Error('Please verify your phoneNumber');\n    }\n    \n    const accessToken = await signAccessToken(user);\n    \n    const refreshToken = await signRefreshToken({ userId: user._id });\n    \n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  // refreshes access tokens\n  async refreshAccessToken(token:string) {\n    const decoded = await verifyJwt<{ session: string }>(token);\n\n    if (!decoded) {\n      throw new Error('Could not refresh access token');\n    }\n\n    const session = await findSessionById(decoded.session);\n\n    if (!session || !session.valid) {\n      throw new Error('Could not refresh access token');\n    }\n\n    const user = await this.models.User.findById(String(session.userId));\n\n    if (!user) {\n      throw new Error('Could not refresh access token');\n    }\n\n    const accessToken = signAccessToken(user);\n\n    return { accessToken };\n  }\n\n}"]}