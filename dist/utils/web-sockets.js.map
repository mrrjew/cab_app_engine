{"version":3,"file":"web-sockets.js","sourceRoot":"/","sources":["utils/web-sockets.ts"],"names":[],"mappings":"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","sourcesContent":["import { Server as SocketIOServer, Socket } from \"socket.io\";\nimport {app} from '../start/index'\nimport http from 'http'\n\nconst server = http.createServer(app)\n\nconst io = new SocketIOServer(server)\n\nconst driverLocations: Map<string, [number, number]> = new Map();\nconst passengerLocations: Map<string, [number, number]> = new Map();\n\nio.on('connection', (socket:Socket) => {\n    console.log('Client connected:', socket.id);\n\n    // Handle driver location updates\n    socket.on('driverLocationUpdate', (location: [number, number]) => {\n        // Store driver location\n        driverLocations.set(socket.id, location);\n    });\n\n    // Handle passenger location updates\n    socket.on('passengerLocationUpdate', (location: [number, number]) => {\n        // Store passenger location\n        passengerLocations.set(socket.id, location);\n    });\n\n        // Handle ride request\n        socket.on('requestRide', () => {\n            // Calculate distance between passenger and drivers\n            const passengerLocation = passengerLocations.get(socket.id);\n            const availableDrivers = [...driverLocations.entries()];\n            const distances = availableDrivers.map(([driverId, driverLocation]) => ({\n                driverId,\n                distance: calculateDistance(passengerLocation, driverLocation)\n            }));\n    \n            // Send distances to passenger\n            socket.emit('driverDistances', distances);\n        });\n\n           // Handle disconnection\n    socket.on('disconnect', () => {\n        console.log('Client disconnected:', socket.id);\n        driverLocations.delete(socket.id);\n        passengerLocations.delete(socket.id);\n    });\n\n    function calculateDistance(location1: [number, number], location2: [number, number]): number {\n        const [lat1, lon1] = location1;\n        const [lat2, lon2] = location2;\n    \n        const R = 6371; // Radius of the Earth in kilometers\n    \n        const dLat = deg2rad(lat2 - lat1);\n        const dLon = deg2rad(lon2 - lon1);\n    \n        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n                  Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\n                  Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    \n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    \n        const distance = R * c; // Distance in kilometers\n        return distance;\n    }\n    \n    function deg2rad(deg: number): number {\n        return deg * (Math.PI / 180);\n    }\n    \n})"]}