{"version":3,"file":"googleOauth.router.js","sourceRoot":"/","sources":["routes/auth/googleOauth.router.ts"],"names":[],"mappings":"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","sourcesContent":["import express from \"express\";\nimport { google } from \"googleapis\";\nimport config from \"../../config\";\nimport { signJwt } from \"../../utils/token\";\nimport User from \"../../models/user/user\";\nimport axios from \"axios\";\nimport { appContext } from \"../../start\";\n\nconst { oauth: { google: { clientId, clientSecret } }, app: { baseUrl } } = config;\n\nconst router = express.Router();\n\nconst redirectURI = `${baseUrl}/auth/google/callback`; // Ensure to use absolute URL\n\nconst oauth2Client = new google.auth.OAuth2(\n  clientId.trim(),\n  clientSecret.trim(),\n  redirectURI\n);\n\nconst scopes = [\n  \"https://www.googleapis.com/auth/userinfo.profile\",\n  \"https://www.googleapis.com/auth/userinfo.email\",\n  \"https://www.googleapis.com/auth/user.phonenumbers.read\"\n];\n\n// Generate Google OAuth2 URL\nfunction getGoogleAuthURL() {\n  return oauth2Client.generateAuthUrl({\n    access_type: \"offline\",\n    scope: scopes,\n    prompt: \"consent\",\n  });\n}\n\n// Endpoint to get Google OAuth2 URL\nrouter.get(\"/google/url\", (req, res) => {\n  return res.send(getGoogleAuthURL());\n});\n\n// Exchange code for tokens and fetch user profile\nrouter.get(`/google/callback`, async (req, res) => {\n  const code = req.query.code as string;\n  try {\n    const { tokens } = await oauth2Client.getToken(code);\n    oauth2Client.setCredentials(tokens);\n\n    const oauth2 = google.oauth2({ version: \"v2\", auth: oauth2Client });\n    const { data: googleUser } = await oauth2.userinfo.get();\n\n    const { email, verified_email, given_name, family_name, picture, locale } = googleUser;\n    console.log(googleUser)\n\n    const user = await appContext.models.User.findOne({ email });\n\n    let _user = {\n      email,\n      // phoneNumber:phoneNumber,\n      verified: verified_email,\n      firstname: given_name,\n      lastname: family_name,\n      profile: { avatar: picture },\n      settings: { language: locale.split('-')[0].toUpperCase() }\n    };\n\n    let token;\n\n    if (!user) {\n      const newUser = await axios.post(`${baseUrl}/auth/register`, _user);\n      token = await signJwt(newUser.data);\n    } else {\n      token = await signJwt(user);\n    }\n\n    res.cookie('access-token', token, {\n      maxAge: 900000,\n      httpOnly: true,\n      secure: false,\n    });\n\n    return res.status(201).send('google oauth complete');\n  } catch (error) {\n    console.error(\"Error fetching user:\", error); \n    return res.status(500).send(`Error fetching user: ${error.message}`);\n  }\n});\n\nexport default router;\n"]}