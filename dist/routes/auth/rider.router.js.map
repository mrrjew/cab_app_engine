{"version":3,"file":"rider.router.js","sourceRoot":"/","sources":["routes/auth/rider.router.ts"],"names":[],"mappings":";;;AAAA,8DAAqD;AAErD,gFAAmD;AACnD,uCAAwC;AACxC,4EAA4C;AAE5C,MAAM,MAAM,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;AAEhC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAC,iBAAU,EAAC,CAAO,GAA4B,EAAE,GAAa,EAAE,EAAE;IAC9E,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAC3B,MAAM,MAAM,GAAG,MAAM,kBAAU,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACnE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AACrC,CAAC,CAAA,CAAC,CAAA;AAEF,MAAM,CAAC,GAAG,CAAC,SAAS,EAAC,iBAAU,EAAC,CAAO,CAAK,EAAE,GAAa,EAAE,EAAE;IAC7D,MAAM,MAAM,GAAG,MAAM,eAAK,CAAC,IAAI,EAAE,CAAA;IACjC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AAC9B,CAAC,CAAA,CAAC,CAAA;AAEF,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAO,GAAY,EAAE,GAAa,EAAE,EAAE;IAC3D,MAAM,KAAK,GAAG,MAAM,kBAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,aAAa,CAAC,GAAG,EAAC,GAAG,CAAC,CAAC;IAC5E,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;AAC3C,CAAC,CAAA,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,CAAM,GAAY,EAAE,GAAa,EAAE,EAAE;IACxD,MAAM,QAAQ,GAAG,MAAM,kBAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,EAAC,GAAG,CAAC,CAAC;IAC7E,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC1C,CAAC,CAAA,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAM,GAAY,EAAE,GAAa,EAAE,EAAE;IACjE,MAAM,QAAQ,GAAG,MAAM,kBAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,EAAC,GAAG,CAAC,CAAC;IAChF,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC1C,CAAC,CAAA,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAM,GAAY,EAAE,GAAa,EAAE,EAAE;IAChE,MAAM,QAAQ,GAAG,MAAM,kBAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,aAAa,CAAC,GAAG,EAAC,GAAG,CAAC,CAAC;IAC/E,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC1C,CAAC,CAAA,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAM,GAAY,EAAE,GAAa,EAAE,EAAE;IACvD,MAAM,KAAK,GAAG,MAAM,kBAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,EAAC,GAAG,CAAC,CAAC;IACzE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACvC,CAAC,CAAA,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,eAAe,EAAE,iBAAU,EAAE,CAAM,GAA4B,EAAE,GAAa,EAAE,EAAE;IACzF,MAAM,KAAK,GAAG,MAAM,kBAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,EAAC,GAAG,CAAC,CAAC;IAC1E,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACvC,CAAC,CAAA,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,CAAC,eAAe,EAAC,iBAAU,EAAE,CAAM,GAA6B,EAAE,GAAa,EAAE,EAAE;IAC5F,MAAM,kBAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,EAAC,GAAG,CAAC,CAAC;AAChE,CAAC,CAAA,CAAC,CAAC;AAGH,kBAAe,MAAM,CAAC","sourcesContent":["import express, { Request, Response } from 'express';\nimport { IAppContext } from '../../types/app';\nimport setContext from '../../middlewares/context';\nimport { appContext} from '../../start';\nimport Rider from '../../models/user/rider';\n\nconst router = express.Router();\n\nrouter.get('/me',setContext,async (req: Request & { user: any }, res: Response) => {\n    console.log(req.user._id)\n  const _Rider = await appContext.models.Rider.findById(req.user._id)\n  return res.status(200).json(_Rider)\n})\n\nrouter.get('/riders',setContext,async (_:any, res: Response) => {\n  const _Rider = await Rider.find()\n  res.status(200).json(_Rider)\n})\n\nrouter.post('/register', async (req: Request, res: Response) => {\n    const Rider = await appContext.services.RiderService.registerRider(req,res);\n    return res.status(201).json({ Rider });\n});\n\nrouter.post('/verify', async(req: Request, res: Response) => {\n    const response = await appContext.services.RiderService.verifyRider(req,res);\n    return res.status(200).json(response);\n});\n\nrouter.post('/forgot-password', async(req: Request, res: Response) => {\n    const response = await appContext.services.RiderService.forgotPassword(req,res);\n    return res.status(200).json(response);\n});\n\nrouter.post('/reset-password', async(req: Request, res: Response) => {\n    const response = await appContext.services.RiderService.resetPassword(req,res);\n    return res.status(200).json(response);\n});\n\nrouter.post('/login', async(req: Request, res: Response) => {\n    const Rider = await appContext.services.RiderService.loginRider(req,res);\n    return res.status(200).json(Rider);\n});\n\nrouter.put('/update-rider', setContext, async(req: Request & { user: any }, res: Response) => {\n    const Rider = await appContext.services.RiderService.updateRider(req,res);\n    return res.status(200).json(Rider);\n});\n\nrouter.delete('/delete-rider',setContext, async(req: Request & { Rider: any }, res: Response) => {\n    await appContext.services.RiderService.deleteRider(req,res);\n}); \n\n\nexport default router;\n"]}