{"version":3,"file":"app.js","sourceRoot":"/","sources":["types/app.ts"],"names":[],"mappings":";;;AASA,MAAqB,QAAQ;IAG3B,YAAY,OAAoB;QAC9B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEK,kBAAkB,CAAC,MAAW;;YAClC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAChE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACpB,IAAI,CAAC,MAAM,EAAE;gBACX,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;aAC3C;YAED,OAAO,MAAM,CAAC;QAChB,CAAC;KAAA;IAEK,iBAAiB,CAAC,MAAW;;YACjC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;YAErE,IAAI,CAAC,IAAI,EAAE;gBACT,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;aAClC;YAED,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;IAEK,oBAAoB,CAAC,OAAY;;YACrC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;YAEtG,IAAI,CAAC,OAAO,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;aACrC;YAED,OAAO,OAAO,CAAC;QACjB,CAAC;KAAA;CACF;AArCD,2BAqCC","sourcesContent":["import config from '../config';\nimport { IModels } from '../models';\nimport { IServices } from '../services';\nimport axios from 'axios';\nexport interface IAppContext {\n  models?: IModels;\n  services?: IServices;\n}\n\nexport default class IService {\n  models?: IModels;\n  context?: IAppContext;\n  constructor(context: IAppContext) {\n    this.models = context.models;\n    this.context = context;\n  }\n\n  async authenticate_rider(userId: any) {\n    const driver = await this.context.models.Rider.findById(userId);\n    console.log(driver);\n    if (!driver) {\n      throw new Error('User not authenticated');\n    }\n\n    return driver;\n  }\n\n  async authenticate_ride(rideId: any) {\n    const ride = await this.context.models.Ride.findOne({ _id: rideId });\n\n    if (!ride) {\n      throw new Error('no ride found');\n    }\n\n    return ride;\n  }\n\n  async authenticate_mileage(riderId: any) {\n    const mileage = await this.context.models.Mileage.findOne({ rider: riderId }).sort({ updatedAt: -1 });\n\n    if (!mileage) {\n      throw new Error('no mileage found');\n    }\n\n    return mileage;\n  }\n}\n"]}